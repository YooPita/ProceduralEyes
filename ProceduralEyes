using System.Collections.Generic;
using UnityEditor;
using UnityEditorInternal;
using UnityEngine;

public class ProceduralEyes : MonoBehaviour
{
    public float maxZFar = -5;
    public List<Eye> Eyes = new List<Eye>();

    void OnDrawGizmosSelected()
    {
        Gizmos.color = Color.red;
        foreach(Eye a in Eyes)
        {
            if(a.eye!=null)Gizmos.DrawWireSphere(a.eye.position, a.radius);
        }
    }
    
    void Update ()
    {
        foreach (Eye a in Eyes)
        {
            Vector2 controller;
            float lerpVal = (maxZFar - transform.position.z) / maxZFar;
            controller = Vector2.Lerp(a.eye.localPosition, transform.localPosition, lerpVal / 2);

            var leftPos = Vector2.ClampMagnitude(controller - (Vector2)a.eye.localPosition, a.radius);//Normalization
            if (Vector3.Angle(a.eye.transform.forward, a.eye.transform.localPosition) < 60)
            {
                leftPos.x *= -1;
            }

            a.eye.GetChild(0).localPosition = leftPos;//The first child is the pupil 
        }
    }

}

[System.Serializable]
public struct Eye
{
    public Transform eye;
    public float radius;
}

[CustomEditor(typeof(ProceduralEyes))]
public class ProceduralEyesEditor : Editor
{
    private ReorderableList list;

    private void OnEnable()
    {
        list = new ReorderableList(serializedObject,
                serializedObject.FindProperty("Eyes"),
                true, true, true, true);

        list.drawElementCallback =
    (Rect rect, int index, bool isActive, bool isFocused) => {
        var element = list.serializedProperty.GetArrayElementAtIndex(index);
        rect.y += 2;
        EditorGUI.PropertyField(
            new Rect(rect.x, rect.y, rect.width - 30, EditorGUIUtility.singleLineHeight),
            element.FindPropertyRelative("eye"), GUIContent.none);
        EditorGUI.PropertyField(
            new Rect(rect.x + rect.width - 30, rect.y, 30, EditorGUIUtility.singleLineHeight),
            element.FindPropertyRelative("radius"), GUIContent.none);
    };
    }

    public override void OnInspectorGUI()
    {
        ProceduralEyes myTarget = (ProceduralEyes)target;
        myTarget.maxZFar = EditorGUILayout.FloatField("Max Z Far", myTarget.maxZFar);

        serializedObject.Update();
        list.DoLayoutList();
        serializedObject.ApplyModifiedProperties();
    }
}
